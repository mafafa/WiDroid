<UserControl x:Class="WiDroid.Views.SettingsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:WiDroid.Views"
             xmlns:localConverters="clr-namespace:WiDroid.Views.Converters"
             xmlns:CommonConverters="clr-namespace:Helper.CommonConverters;assembly=Helper"
             xmlns:validationRules="clr-namespace:Helper.CommonValidationRules;assembly=Helper"
             mc:Ignorable="d" 
             d:DesignHeight="720" d:DesignWidth="1280">
    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVisibility" />

        <Style TargetType="Image">
            <Setter Property="Height" Value="16" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Margin" Value="10,0,0,0" />
        </Style>

        <ControlTemplate x:Key="errorTemplateSilverlightStyle">
            <StackPanel Orientation="Horizontal">
                <Border BorderThickness="1" BorderBrush="#FFdc000c" CornerRadius="0.7"
                    VerticalAlignment="Top">
                    <Grid>
                        <Polygon x:Name="toolTipCorner"
                            Grid.ZIndex="2"
                            Margin="-1"
                            Points="6,6 6,0 0,0" 
                            Fill="#FFdc000c" 
                            HorizontalAlignment="Right" 
                            VerticalAlignment="Top"
                            IsHitTestVisible="True"/>
                        <Polyline Grid.ZIndex="3"
                            Points="7,7 0,0" Margin="-1" HorizontalAlignment="Right" 
                            StrokeThickness="1.5"
                            StrokeEndLineCap="Round"
                            StrokeStartLineCap="Round"
                            Stroke="White"
                            VerticalAlignment="Top"
                            IsHitTestVisible="True"/>
                        <AdornedElementPlaceholder x:Name="adorner"/>
                    </Grid>
                </Border>
                <Border x:Name="errorBorder" Background="#FFdc000c" Margin="1,0,0,0"
                    Opacity="0" CornerRadius="1.5"
                    IsHitTestVisible="False"
                    MinHeight="24" MaxWidth="267">
                    <Border.Effect>
                        <DropShadowEffect ShadowDepth="2.25" 
                            Color="Black" 
                            Opacity="0.4"
                            Direction="315"
                            BlurRadius="4"/>
                    </Border.Effect>
                    <TextBlock Text="{Binding ElementName=adorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                       Foreground="White" Margin="8,3,8,3" TextWrapping="Wrap"/>
                </Border>
            </StackPanel>
            <ControlTemplate.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{CommonConverters:MultipleBooleanOrConverter}">
                            <Binding ElementName="adorner" Path="AdornedElement.IsKeyboardFocused" />
                            <Binding ElementName="toolTipCorner" Path="IsMouseOver"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <DataTrigger.EnterActions>
                        <BeginStoryboard x:Name="fadeInStoryboard">
                            <Storyboard>
                                <DoubleAnimation Duration="00:00:00.15"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="1"/>
                                <ThicknessAnimation Duration="00:00:00.15"
                                            Storyboard.TargetName="errorBorder"
                                            Storyboard.TargetProperty="Margin"
                                            FillBehavior="HoldEnd"
                                            From="1,0,0,0"
                                            To="5,0,0,0">
                                    <ThicknessAnimation.EasingFunction>
                                        <BackEase EasingMode="EaseOut" Amplitude="2"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <StopStoryboard BeginStoryboardName="fadeInStoryboard"/>
                        <BeginStoryboard x:Name="fadeOutStoryBoard">
                            <Storyboard>
                                <DoubleAnimation Duration="00:00:00"
                                         Storyboard.TargetName="errorBorder"
                                         Storyboard.TargetProperty="Opacity"
                                         To="0"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </UserControl.Resources>
    
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="5*"/>
            <RowDefinition Height="87*"/>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="8*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="5*"/>
            <ColumnDefinition Width="95*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="1" Grid.Row="1">
            <Grid.RowDefinitions>
                <!-- One Row per menu item -->
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="10*"/>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="100*"/>
            </Grid.ColumnDefinitions>

            <Label Grid.Column="0">Discovery Port:</Label>
            <StackPanel Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Left">
                <TextBox Width="60" Name="textBoxDiscoveryPort" Validation.ErrorTemplate="{StaticResource errorTemplateSilverlightStyle}">
                    <TextBox.Text>
                        <Binding Path="DiscoveryPort" UpdateSourceTrigger="PropertyChanged">
                            <Binding.ValidationRules>
                                <validationRules:UIntMinMaxRule Max="65535"/>
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Image Source="pack://application:,,,/Resources/Icons/icon_help_128x128.png" Stretch="Fill"/>
            </StackPanel>
        </Grid>

        <Separator Grid.Row="2" Grid.ColumnSpan="2" Visibility="{Binding SettingsCurrentState, Converter={localConverters:SettingsStateToVisibilityConverter}}"/>

        <StackPanel Grid.Row="3" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Right" 
                    Visibility="{Binding SettingsCurrentState, Converter={localConverters:SettingsStateToVisibilityConverter}}">
            <Button Margin="5" Padding="5" Content="Save" Command="{Binding SaveSettingsCommand}">
                <Button.Style>
                    <Style TargetType="Button">
                        <Setter Property="IsEnabled" Value="False"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <!-- Add a condition for each settings which has a validation rule -->
                                    <Condition Binding="{Binding Path=(Validation.HasError), ElementName=textBoxDiscoveryPort}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="IsEnabled" Value="True"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
            </Button>
            <Button Margin="5" Padding="5" Command="{Binding RevertSettingsCommand}">Cancel</Button>
        </StackPanel>
    </Grid>
</UserControl>
